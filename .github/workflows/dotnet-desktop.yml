name: OcrInspector Build and Publish

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Publish
    runs-on: windows-latest

    env:
      buildPlatform: 'any cpu'
      buildConfiguration: 'Release'
      artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
      binariesDirectory: ${{ github.workspace }}/binaries

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4.0.0
      with:
        # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
        dotnet-version: 8
        # # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
        # dotnet-quality: # optional
        # # Optional global.json location, if your global.json isn't located in the root of the repo.
        # global-json-file: # optional
        # # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
        # source-url: # optional
        # # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
        # owner: # optional
        # # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
        # config-file: # optional
        # # Optional input to enable caching of the NuGet global-packages folder
        # cache: # optional
        # # Used to specify the path to a dependency file: packages.lock.json. Supports wildcards or a list of file names for caching multiple dependencies.
        # cache-dependency-path: # optional
          
          

    # - name: Install NuGet Tools
    #   uses: NuGet/setup-nuget@v1

    - name: Restore Packages
      run: dotnet restore '**/*.sln'

    - name: Build Solution
      run: msbuild /t:publish /p:Configuration=Release /p:DeployOnBuild=true /p:PublishDir=${{ env.binariesDirectory }} '**/*.sln'

    - name: Create Build Artifact
      run: |
        mkdir -p ${{ env.artifactStagingDirectory }}
        cd $(Build.BinariesDirectory)
        zip -r ${{ env.artifactStagingDirectory }}/${{ github.run_number }}-win-x64.zip .

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: drop
        path: ${{ env.artifactStagingDirectory }}/${{ github.run_number }}-win-x64.zip

  create_release:
    name: Create GitHub Release & Tag
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Parse Build Version for GitHub Tag
      id: parse_version
      run: echo "::set-output name=buildVersion::$(echo ${{ github.run_number }} | grep -oP '\d+(.\d+)?')"

    - name: Download Build Artifacts
      uses: actions/download-artifact@v2
      with:
        name: drop

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: drop/*
        tag_name: v${{ steps.parse_version.outputs.buildVersion }}
        release_name: Production v${{ steps.parse_version.outputs.buildVersion }}
        body: "Release notes here"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
