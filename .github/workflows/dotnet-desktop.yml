name: OcrInspector Build and Publish

permissions:
  contents: write
  
on:
  push:
    branches:
      - main
      
defaults:
  run:
    working-directory: src

jobs:
  build:
    name: Build and Publish
    runs-on: windows-latest

    env:
      buildPlatform: 'any cpu'
      buildConfiguration: 'Release'
      artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
      binariesDirectory: ${{ github.workspace }}/binaries
      projectName: OcrInspector

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: 8

    - name: Restore Packages
      shell: pwsh
      run:  dotnet restore

    - name: Publish
      shell: pwsh
      run:  dotnet publish -c Release --self-contained -r win-x64

    - name: Create Build Artifact
      shell: pwsh
      run: |
        New-Item -Path "${{ env.artifactStagingDirectory }}" -ItemType Directory
        Compress-Archive `
            -Path OcrInspector/bin/Release/net8.0-windows/win-x64./publish/* `
            -DestinationPath ${{ env.artifactStagingDirectory }}/${{ github.run_number }}-win-x64.zip 

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.3
      with:
        name: drop
        path: ${{ env.artifactStagingDirectory }}/*.zip

  create_release:
    name: Create GitHub Release & Tag
    runs-on: windows-latest
    needs: build
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get current date with PowerShell
      shell: pwsh
      run: echo "CURRENT_DATE=$(Get-Date -Format Get-Date -UFormat %Y.%m.%d)" >> $env:GITHUB_ENV

    - name: Print current date
      shell: pwsh
      run: echo "The current date is $env:CURRENT_DATE"
      
    - name: Parse Build Version for GitHub Tag
      shell: pwsh
      run: echo "buildVersion=$(Get-Date -Format 'yyyy.MM.dd')" >> $GITHUB_OUTPUT
    
    - name: Print buildVersion
      shell: pwsh
      run: Write-Host "buildVersion ${{ env.buildVersion }}"
      
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4.1.7
      with:
        name: drop

    - name: Check Version
      shell: pwsh
      run: Write-Host "Production v${{ env.buildVersion }}.${{ github.run_number }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./*.zip
        tag_name: v${{ env.buildVersion }}
        name: Production v${{ env.buildVersion }}.${{ github.run_number }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
